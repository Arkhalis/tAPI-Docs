//global ModNPC only
public override List<int> EditSpawnPool(int x, int y, List<int> pool, Player player) { return pool; }
public override void UpdateSpawnRate(Player player) { }

public override bool CanSpawn(int x, int y, int type, Player spawnedOn) { return false; }
public override bool CanTownNPCSpawn() { return false; }
public override string CheckConditions(int minX, int maxX, int minY, int maxY) { return null; } //used to set up custom room requirements. returns any problems it hits as a string.

public override bool PreAI() { return true; }
public override void AI() { }
public override void PostAI() { }

public override bool PreNPCLoot() { return true; }
public override void NPCLoot() { }
public override void PostNPCLoot() { }

public override void SelectFrame(int frameSize) { }
public override void HitEffect(int hitDirection, double damage, bool isDead) { }

//called when this NPC damages a player.
public override void DamagePlayer(Player p, int hitDir, ref int damage, ref bool crit, ref float critChance) { }
public override void DealtPlayer(Player p, int hitDir, int dmgDealt, bool crit) { }

//called when a player damages this NPC.
public override void DamageNPC(Player p, int hitDir, ref int damage, ref float knockback, ref bool crit, ref float critMult) { }
public override void DealtNPC(Player p, int hitDir, int dmgDealt, float knockback, bool crit) { }

//called when a projectile damages this NPC.
public override void DamageProjectile(Projectile p, int hitDir, ref int damage, ref float knockback, ref bool crit, ref float critMult) { }
public override void DealtProjectile(Projectile p, int hitDir, int dmgDealt, float knocback, bool crit) { }

//called when an NPC attacks this friendly NPC, or when a friendly NPC is attacked by this NPC.
public override void DamageFriendNPC(NPC n, int hitDir, ref int damage, ref float knockback, ref bool crit, ref float critMult) { }
public override void DealtFriendNPC(NPC n, int hitDir, int dmgDealt, float knockback, bool crit) { }

public override bool? CanHitPlayer(Player p) { return null; }
public override bool? CanHitNPC(Player p) { return null; }
public override bool? CanHitFriendNPC(NPC npc) { return null; }

public override bool PreDraw(SpriteBatch sb) { return true; }
public override void PostDraw(SpriteBatch sb) { }
public override void DrawMapIcon(SpriteBatch sb, Vector2 drawPosition, float scale, Color color, ref string cursorText) { }
public override Color ModifyDrawColor(Color color) { return color; }

//townNPC stuffs
public override string SetName() { return "Townie"; }
public override string SetChat() { return "I'm a town npc! Woo!"; }//called only for the town npc, used to set up chat.
public override string PostSetChat(string chat) { return null; } //called globally, can be used to modify vanilla town npc chat.
public override void SetupShop(Chest chest, ref int index) { } //called only for the town npc, used to set up the shop.
public override bool ResetShop(Chest chest) { return true; } //called only for the town npc, used to prevent shop reset.
public override void PostSetupShop(Chest chest, int lastIndex) { } //called globally, can be used to modify vanilla town npc shops.	
public override void PostSetupTravelShop(int lastIndex) { } //called globally, can be used to modify the travelling merchant's shop.	(Main.travelShop)
public override void SetChatButtons(ref string[] buttons) { }
//NOTE: Changed how this works because the way it worked before (returning an Action) was idiotic as you can just run the code here,
//so the only reason I even had it was for shops. Changed it to a bool, much cleaner solution. :P
public override void OnChatButtonClicked(string[] buttons, int buttonIndex, ref bool openShop) { }