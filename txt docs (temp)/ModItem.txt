public override void OnUpdate(ref float gravity, ref float maxVelocity) { } //Called on items in world, useful for making soul-like items.
public override bool PreWorldDraw(SpriteBatch sb) { return true; }
public override void PostWorldDraw(SpriteBatch sb) { }

//Called when an item comes in range of being picked up, return false to not pick up.
//when vacuum is true, the item is being vaccumed towards the player and not actually being picked up.
public override bool CanPickup(Player player, bool vacuum) { return true; }
//Called when an item is picked up by the player. Return false to cause the item to dissapear (like hearts and mana stars)
public override bool OnPickup(Player player) { return true; }

public override bool? UseItem(Player player) { return null; }
public override void UseItemEffects(Player P, Rectangle rect) { }
public override bool CanUse(Player player) { return true; }
public override bool ConsumeItem(Player p) { return true; } //called when a consumable is about to be consumed.
public override bool ConsumeAmmo(Player p) { return true; } //called when ammo is about to be consumed. (on gun and ammo)
public override bool ConsumeBait(Player p) { return true; } //called when bait is about to be consumed. (on bait and fishing rod)

//these 5 methods used to be in custom UseStyle and HoldStyles, but are now per item.
public override void UseStyle(Player p) { }
public override void HoldStyle(Player p) { }
public override void SetUseFrame(Player p) { }
public override bool SetHoldFrame(Player p) { return false; } //return true to override the frame and false to allow normal behavior (ie hook frames).
public override Rectangle SetUseHitbox(Player p, Rectangle rect) { return rect; }

public override void PreItemCheck(Player p) { } //Called before item check executes.
public override void PostItemCheck(Player p) { } //Called after item check executes.

public override void OnBuy(Chest shop, int slot, Item item) { }
public override void OnCraft(Recipe recipe) { }
public override string OnAffixName(string currentName, string oldName) { return currentName; }
public override bool PreReforge() { return true; }
public override void PostReforge() { }

public override bool PreShoot(Player player, Vector2 position, Vector2 velocity, int projType, int damage, float knockback) { return true; }

public override bool CanEquip(Player player, int slot) { return true; }
public override void OnEquip(Player player, int slot) { }
public override void OnUnEquip(Player player, int slot) { }

public override void Effects(Player player) { }
public override void VanityEffects(Player player) { }
public override void ArmorSetBonus(Player player) { } //called when a full armor set is worn.
public override void VanitySetBonus(Player player) { } //called when a full armor set is visually worn.
//Called to check if the player has an armor set. Return false to execute normal behavior, else true to run the armor set methods.
//Can be used to create custom sets utilizing vanilla items (in a similar manner to 'ancient' sets) or sets that utilize only 2 items
public override bool IsArmorSet(Player player, bool vanity) { return false; }
//called on custom dye items, if glows is true then the hair glows regardless of light level.
public override Color DyeHair(Player player, Color dyeColor, ref bool glows) { return dyeColor; }

//Called when an NPC damages this item's player.
public override void DamagePlayer(NPC npc, Player owner, int hitDir, ref int damage, ref bool crit, ref float critMult) { }
public override void DealtPlayer(NPC npc, Player owner, int hitDir, int dmgDealt, bool crit) { }

//Called when this item's player attacks another player.
public override void DamagePVP(Player owner, Player p, int hitDir, ref int damage, ref bool crit, ref float critMult) { }
public override void DealtPVP(Player owner, Player p, int hitDir, int dmgDealt, bool crit) { }

//called when this item's player damages an NPC.
public override void DamageNPC(Player owner, NPC npc, int hitDir, ref int damage, ref float knockback, ref bool crit, ref float critMult) { }
public override void DealtNPC(Player owner, NPC npc, int hitDir, int dmgDealt, float knockback, bool crit) { }

public override bool? CanHitPlayer(NPC npc, Player owner) { return null; }
public override bool? CanHitPVP(Player owner, Player p) { return null; }
public override bool? CanHitNPC(Player owner, NPC npc) { return null; }

public override void OnHitPVP(Player owner, Player victim, Vector2 hitLocation) { }
public override void OnHitNPC(Player owner, NPC victim, Vector2 hitLocation) { }

public override void GetFishingLevel(Player player, Item bait, ref int fishingLevel) { }
//liquidType: 0-2, water, lava, honey; poolCount = the amount of water tiles in the pool; worldLayer: 0-4, sky, surface, dirtlayer, rocklayer, hell
//if caughtType is -1, it will bobber but not spawn any item when brought back, allowing for unconventional catches
public override void OnFishSelected(Player player, Item fishingRod, Item bait, int liquidType, int poolCount, int worldLayer, int questFish, ref int caughtType) { }

public override void ModifyDrawLayerList(Player player, List<PlayerLayer> list, int slot) { }
public override void ModifyDrawLayerHeadList(Player player, List<PlayerLayer> list, int slot) { }
public override Color ModifyDrawColor(Player owner, Color color) { return color; }
public override void ModifyToolTip(Player owner, List<string> list) { }